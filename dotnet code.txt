Cart controller:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TheShoppinCart.Controllers
{
    public class CartController
    {
        private DataAccess dataAccess = new DataAccess();

        public void AddToCart(int userId, int productId, int quantity)
        {
            dataAccess.AddToCart(userId, productId, quantity);
        }

        public List<Cart> GetCartItems(int userId)
        {
            return dataAccess.GetCartItems(userId);
        }
        public void ClearCart(int userId)
        {
            dataAccess.ClearCart(userId);
        }
        public void RemoveFromCart(int userId, int productId)
        {
            dataAccess.RemoveFromCart(userId, productId);
        }
    }
}


Checkoutview controller
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TheShoppinCart.Controllers
{
    public class CheckoutController
    {
        private DataAccess dataAccess = new DataAccess();
        
    

        public string ApplyDiscount(string code, decimal totalAmount,out decimal newTotal)
        {
            Discount discount = dataAccess.GetDiscountByCode(code);
            newTotal = totalAmount;

            if (discount != null)
            {
                newTotal=totalAmount - (totalAmount * (discount.DiscountPercentage / 100));
                return discount.VoucherMessage;
            }

            else
            {
                throw new Exception("please enter valid Discount Code");
            }
            return string.Empty;
        }
    }
}


Product controller
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TheShoppinCart.Controllers
{
    public class ProductController
    {
        private DataAccess dataAccess = new DataAccess();

        public List<Product> GetProducts(string sortBy = "Price", string sortOrder = "ASC")
        {
            return dataAccess.GetProducts(sortBy,sortOrder);
        }
        public Product GetProductById(int productId)
        {
            return dataAccess.GetProductById(productId);
        }
        public void AddProduct(Product product)
        {
            dataAccess.AddProduct(product);
        }
        public bool ProductExists(string productName, decimal price)
        {
            return dataAccess.ProductExists(productName, price);
        }
        public void UpdateProduct(Product product)
        {
            dataAccess.UpdateProduct(product);

        }
        public void RemoveProduct(int productID)
        {
            dataAccess.RemoveProduct(productID);
        }
    }
}


User controller

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TheShoppinCart.Controllers
{
    public class UserController
    {
        private DataAccess dataAccess = new DataAccess();

        public bool CreateUser(string username, string password)
        {
            return dataAccess.CreateUser(username, password);
        }

        public User GetUser(string username, string password)
        {
            //User user = dataAccess.GetUser().FirstOrDefault(user => user.Username == username && username.Password == password);
            //return user;
            return dataAccess.GetUser(username, password);
        }
        public bool DoesUserExist(string username,string password)
        {
            return dataAccess.DoesUserExist(username,password);
        }
    }
}



Data access:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;

public class DataAccess
{
    private string connectionString = ConfigurationManager.ConnectionStrings["ShoppingCart"].ConnectionString;

    public List<Product> GetProducts(string sortBy, string sortOrder)
    {
        List<Product> products = new List<Product>();

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            string query = "SELECT * FROM Products ORDER BY " + sortBy + " " + sortOrder;
            SqlCommand cmd = new SqlCommand(query, conn);
            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                products.Add(new Product
                {
                    ProductID = Convert.ToInt32(reader["ProductID"]),
                    ProductName = reader["ProductName"].ToString(),
                    Price = Convert.ToDecimal(reader["Price"])
                });
            }
        }

        return products;
    }
    public Product GetProductById(int productId)
    {
        Product product = null;

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();

            SqlCommand cmd = new SqlCommand("SELECT * FROM Products WHERE ProductID=@ProductID", conn);
            cmd.Parameters.AddWithValue("@ProductID", productId);
            SqlDataReader reader = cmd.ExecuteReader();

            if (reader.Read())
            {
                product = new Product
                {
                    ProductID = Convert.ToInt32(reader["ProductID"]),
                    ProductName = reader["ProductName"].ToString(),
                    Price = Convert.ToDecimal(reader["Price"])
                };
            }
        }

        return product;
    }

    public void AddToCart(int userId, int productId, int quantity)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("INSERT INTO Cart (UserID, ProductID, Quantity) VALUES (@UserID, @ProductID, @Quantity)", conn);
            cmd.Parameters.AddWithValue("@UserID", userId);
            cmd.Parameters.AddWithValue("@ProductID", productId);
            cmd.Parameters.AddWithValue("@Quantity", quantity);
            cmd.ExecuteNonQuery();
        }
    }

    public List<Cart> GetCartItems(int userId)
    {
        List<Cart> cartItems = new List<Cart>();

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("SELECT * FROM Cart WHERE UserID = @UserID", conn);
            cmd.Parameters.AddWithValue("@UserID", userId);
            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                cartItems.Add(new Cart
                {
                    CartID = Convert.ToInt32(reader["CartID"]),
                    UserID = Convert.ToInt32(reader["UserID"]),
                    ProductID = Convert.ToInt32(reader["ProductID"]),
                    Quantity = Convert.ToInt32(reader["Quantity"])
                });
            }
        }

        return cartItems;
    }
    public void ClearCart(int userId)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("Delete from Cart where UserId=@UserID", conn);
            cmd.Parameters.AddWithValue("@UserID", userId);
            cmd.ExecuteNonQuery();
        }
    }

    public Discount GetDiscountByCode(string code)
    {
        Discount discount = null;

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("SELECT * FROM Discounts WHERE DiscountCode = @DiscountCode", conn);
            cmd.Parameters.AddWithValue("@DiscountCode", code);
            SqlDataReader reader = cmd.ExecuteReader();

            if (reader.Read())
            {
                discount = new Discount
                {
                    DiscountID = Convert.ToInt32(reader["DiscountID"]),
                    DiscountCode = reader["DiscountCode"].ToString(),
                    DiscountPercentage = Convert.ToDecimal(reader["DiscountPercentage"]),
                    VoucherMessage = reader["VoucherMessage"]?.ToString()
                };
            }
        }

        return discount;
    }

    public bool CreateUser(string username, string password)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("INSERT INTO Users (Username, Password) VALUES (@Username, @Password)", conn);
            cmd.Parameters.AddWithValue("@Username", username);
            cmd.Parameters.AddWithValue("@Password", password);
            int result = cmd.ExecuteNonQuery();
            return result > 0;
        }
    }

    public User GetUser(string username, string password)
    {
        User user = null;

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("SELECT * FROM Users WHERE Username COLLATE Latin1_General_BIN = @Username AND Password COLLATE Latin1_General_BIN = @Password", conn);
            cmd.Parameters.AddWithValue("@Username", username);
            cmd.Parameters.AddWithValue("@Password", password);
            SqlDataReader reader = cmd.ExecuteReader();

            if (reader.Read())
            {
                user = new User
                {
                    UserID = Convert.ToInt32(reader["UserID"]),
                    Username = reader["Username"].ToString(),
                    Password = reader["Password"].ToString()
                };
            }
        }

        return user;
    }
    public bool DoesUserExist(string username, string password)
    {
        bool userExists = false;

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("Select COUNT(1)from Users where Username=@Username And Password=@Password", conn);
            cmd.Parameters.AddWithValue("@Username", username);
            cmd.Parameters.AddWithValue("@Password", password);
            int count = (int)cmd.ExecuteScalar();
            userExists = count > 0;
        }
        return userExists;

    }
    public void AddProduct(Product product)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("INSERT INTO Products (ProductName, Price) VALUES (@ProductName, @Price)", conn);
            cmd.Parameters.AddWithValue("@ProductName", product.ProductName);
            cmd.Parameters.AddWithValue("@Price", product.Price);
            int result = cmd.ExecuteNonQuery();

        }
    }
    public void UpdateProduct(Product product)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("UPDATE Products set ProductName=@ProductName , Price=@Price WHERE ProductID=@ProductID", conn);
            cmd.Parameters.AddWithValue("@ProductName", product.ProductName);
            cmd.Parameters.AddWithValue("@Price", product.Price);
            cmd.Parameters.AddWithValue("@ProductId", product.ProductID);
            int result = cmd.ExecuteNonQuery();

        }

   }
    public void RemoveProduct(int productID)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("DELETE TOP(1) from Products WHERE ProductID=@ProductID", conn);
            cmd.Parameters.AddWithValue("@ProductID", productID);

            int result = cmd.ExecuteNonQuery();
        }
    }

    public void RemoveFromCart(int userId, int productId)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("DELETE FROM Cart WHERE UserID = @UserID AND ProductID =@ProductID", conn);
            cmd.Parameters.AddWithValue("@UserID", userId);
            cmd.Parameters.AddWithValue("@ProductID", productId);
            cmd.ExecuteNonQuery();
        }
    }
    public bool ProductExists(string productName, decimal price)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("SELECT COUNT(*) from Products where ProductName=@ProductName and Price=@Price", conn);
            cmd.Parameters.AddWithValue("@ProductName", productName);
            cmd.Parameters.AddWithValue("@Price", price);
            int count = (int)cmd.ExecuteScalar();
            return count > 0;


        }
    }
}


Program.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using TheShoppinCart.Views;

namespace TheShoppinCart
{
    internal static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new LoginForm());

        }
    }
}


