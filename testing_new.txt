CartController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;
using System.Collections.Generic;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class CartControllerTests
    {
        private CartController cartController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            cartController = new CartController(mockDataAccess.Object);
        }

        [Test]
        public void AddToCart_ShouldCallDataAccessAddToCart()
        {
            int userId = 1;
            int productId = 2;
            int quantity = 3;

            cartController.AddToCart(userId, productId, quantity);

            mockDataAccess.Verify(d => d.AddToCart(userId, productId, quantity), Times.Once);
        }

        [Test]
        public void GetCartItems_ShouldReturnCartItems()
        {
            int userId = 1;
            var expectedCartItems = new List<Cart> { new Cart { CartID = 1, UserID = userId, ProductID = 2, Quantity = 3 } };
            mockDataAccess.Setup(d => d.GetCartItems(userId)).Returns(expectedCartItems);

            var result = cartController.GetCartItems(userId);

            Assert.AreEqual(expectedCartItems, result);
        }

        [Test]
        public void ClearCart_ShouldCallDataAccessClearCart()
        {
            int userId = 1;

            cartController.ClearCart(userId);

            mockDataAccess.Verify(d => d.ClearCart(userId), Times.Once);
        }

        [Test]
        public void RemoveFromCart_ShouldCallDataAccessRemoveFromCart()
        {
            int userId = 1;
            int productId = 2;

            cartController.RemoveFromCart(userId, productId);

            mockDataAccess.Verify(d => d.RemoveFromCart(userId, productId), Times.Once);
        }
    }
}
CheckoutController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class CheckoutControllerTests
    {
        private CheckoutController checkoutController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            checkoutController = new CheckoutController(mockDataAccess.Object);
        }

        [Test]
        public void ApplyDiscount_ValidCode_ShouldReturnDiscountMessageAndNewTotal()
        {
            string code = "DISCOUNT10";
            decimal totalAmount = 100m;
            var discount = new Discount { DiscountCode = code, DiscountPercentage = 10m, VoucherMessage = "10% Off" };
            mockDataAccess.Setup(d => d.GetDiscountByCode(code)).Returns(discount);

            var result = checkoutController.ApplyDiscount(code, totalAmount, out decimal newTotal);

            Assert.AreEqual("10% Off", result);
            Assert.AreEqual(90m, newTotal);
        }

        [Test]
        public void ApplyDiscount_InvalidCode_ShouldThrowException()
        {
            string code = "INVALID";
            decimal totalAmount = 100m;
            mockDataAccess.Setup(d => d.GetDiscountByCode(code)).Returns((Discount)null);

            Assert.Throws<Exception>(() => checkoutController.ApplyDiscount(code, totalAmount, out _));
        }
    }
}
ProductController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;
using System.Collections.Generic;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class ProductControllerTests
    {
        private ProductController productController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            productController = new ProductController(mockDataAccess.Object);
        }

        [Test]
        public void GetProducts_ShouldReturnProducts()
        {
            var expectedProducts = new List<Product> { new Product { ProductID = 1, ProductName = "Test Product", Price = 10m } };
            mockDataAccess.Setup(d => d.GetProducts("Price", "ASC")).Returns(expectedProducts);

            var result = productController.GetProducts();

            Assert.AreEqual(expectedProducts, result);
        }

        [Test]
        public void GetProductById_ShouldReturnProduct()
        {
            int productId = 1;
            var expectedProduct = new Product { ProductID = productId, ProductName = "Test Product", Price = 10m };
            mockDataAccess.Setup(d => d.GetProductById(productId)).Returns(expectedProduct);

            var result = productController.GetProductById(productId);

            Assert.AreEqual(expectedProduct, result);
        }

        [Test]
        public void AddProduct_ShouldCallDataAccessAddProduct()
        {
            var product = new Product { ProductID = 1, ProductName = "Test Product", Price = 10m };

            productController.AddProduct(product);

            mockDataAccess.Verify(d => d.AddProduct(product), Times.Once);
        }

        [Test]
        public void ProductExists_ShouldReturnTrueIfProductExists()
        {
            string productName = "Test Product";
            decimal price = 10m;
            mockDataAccess.Setup(d => d.ProductExists(productName, price)).Returns(true);

            var result = productController.ProductExists(productName, price);

            Assert.IsTrue(result);
        }

        [Test]
        public void UpdateProduct_ShouldCallDataAccessUpdateProduct()
        {
            var product = new Product { ProductID = 1, ProductName = "Test Product", Price = 10m };

            productController.UpdateProduct(product);

            mockDataAccess.Verify(d => d.UpdateProduct(product), Times.Once);
        }

        [Test]
        public void RemoveProduct_ShouldCallDataAccessRemoveProduct()
        {
            int productId = 1;

            productController.RemoveProduct(productId);

            mockDataAccess.Verify(d => d.RemoveProduct(productId), Times.Once);
        }
    }
}
UserController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class UserControllerTests
    {
        private UserController userController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            userController = new UserController(mockDataAccess.Object);
        }

        [Test]
        public void CreateUser_ShouldReturnTrueIfUserCreated()
        {
            string username = "testuser";
            string password = "password";
            mockDataAccess.Setup(d => d.CreateUser(username, password)).Returns(true);

            var result = userController.CreateUser(username, password);

            Assert.IsTrue(result);
        }

        [Test]
        public void GetUser_ShouldReturnUser()
        {
            string username = "testuser";
            string password = "password";
            var expectedUser = new User { UserID = 1, Username = username, Password = password };
            mockDataAccess.Setup(d => d.GetUser(username, password)).Returns(expectedUser);

            var result = userController.GetUser(username, password);

            Assert.AreEqual(expectedUser, result);
        }

        [Test]
        public void DoesUserExist_ShouldReturnTrueIfUserExists()
        {
            string username = "testuser";
            string password = "password";
            mockDataAccess.Setup(d => d.DoesUserExist(username, password)).Returns(true);

            var result = userController.DoesUserExist(username, password);

            Assert.IsTrue(result);
        }
    }
}