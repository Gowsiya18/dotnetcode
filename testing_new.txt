CartController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;
using System.Collections.Generic;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class CartControllerTests
    {
        private CartController cartController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            cartController = new CartController(mockDataAccess.Object);
        }

        [Test]
        public void AddToCart_ShouldCallDataAccessAddToCart()
        {
            int userId = 1;
            int productId = 2;
            int quantity = 3;

            cartController.AddToCart(userId, productId, quantity);

            mockDataAccess.Verify(d => d.AddToCart(userId, productId, quantity), Times.Once);
        }

        [Test]
        public void GetCartItems_ShouldReturnCartItems()
        {
            int userId = 1;
            var expectedCartItems = new List<Cart> { new Cart { CartID = 1, UserID = userId, ProductID = 2, Quantity = 3 } };
            mockDataAccess.Setup(d => d.GetCartItems(userId)).Returns(expectedCartItems);

            var result = cartController.GetCartItems(userId);

            Assert.AreEqual(expectedCartItems, result);
        }

        [Test]
        public void ClearCart_ShouldCallDataAccessClearCart()
        {
            int userId = 1;

            cartController.ClearCart(userId);

            mockDataAccess.Verify(d => d.ClearCart(userId), Times.Once);
        }

        [Test]
        public void RemoveFromCart_ShouldCallDataAccessRemoveFromCart()
        {
            int userId = 1;
            int productId = 2;

            cartController.RemoveFromCart(userId, productId);

            mockDataAccess.Verify(d => d.RemoveFromCart(userId, productId), Times.Once);
        }
    }
}
CheckoutController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class CheckoutControllerTests
    {
        private CheckoutController checkoutController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            checkoutController = new CheckoutController(mockDataAccess.Object);
        }

        [Test]
        public void ApplyDiscount_ValidCode_ShouldReturnDiscountMessageAndNewTotal()
        {
            string code = "DISCOUNT10";
            decimal totalAmount = 100m;
            var discount = new Discount { DiscountCode = code, DiscountPercentage = 10m, VoucherMessage = "10% Off" };
            mockDataAccess.Setup(d => d.GetDiscountByCode(code)).Returns(discount);

            var result = checkoutController.ApplyDiscount(code, totalAmount, out decimal newTotal);

            Assert.AreEqual("10% Off", result);
            Assert.AreEqual(90m, newTotal);
        }

        [Test]
        public void ApplyDiscount_InvalidCode_ShouldThrowException()
        {
            string code = "INVALID";
            decimal totalAmount = 100m;
            mockDataAccess.Setup(d => d.GetDiscountByCode(code)).Returns((Discount)null);

            Assert.Throws<Exception>(() => checkoutController.ApplyDiscount(code, totalAmount, out _));
        }
    }
}
ProductController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;
using System.Collections.Generic;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class ProductControllerTests
    {
        private ProductController productController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            productController = new ProductController(mockDataAccess.Object);
        }

        [Test]
        public void GetProducts_ShouldReturnProducts()
        {
            var expectedProducts = new List<Product> { new Product { ProductID = 1, ProductName = "Test Product", Price = 10m } };
            mockDataAccess.Setup(d => d.GetProducts("Price", "ASC")).Returns(expectedProducts);

            var result = productController.GetProducts();

            Assert.AreEqual(expectedProducts, result);
        }

        [Test]
        public void GetProductById_ShouldReturnProduct()
        {
            int productId = 1;
            var expectedProduct = new Product { ProductID = productId, ProductName = "Test Product", Price = 10m };
            mockDataAccess.Setup(d => d.GetProductById(productId)).Returns(expectedProduct);

            var result = productController.GetProductById(productId);

            Assert.AreEqual(expectedProduct, result);
        }

        [Test]
        public void AddProduct_ShouldCallDataAccessAddProduct()
        {
            var product = new Product { ProductID = 1, ProductName = "Test Product", Price = 10m };

            productController.AddProduct(product);

            mockDataAccess.Verify(d => d.AddProduct(product), Times.Once);
        }

        [Test]
        public void ProductExists_ShouldReturnTrueIfProductExists()
        {
            string productName = "Test Product";
            decimal price = 10m;
            mockDataAccess.Setup(d => d.ProductExists(productName, price)).Returns(true);

            var result = productController.ProductExists(productName, price);

            Assert.IsTrue(result);
        }

        [Test]
        public void UpdateProduct_ShouldCallDataAccessUpdateProduct()
        {
            var product = new Product { ProductID = 1, ProductName = "Test Product", Price = 10m };

            productController.UpdateProduct(product);

            mockDataAccess.Verify(d => d.UpdateProduct(product), Times.Once);
        }

        [Test]
        public void RemoveProduct_ShouldCallDataAccessRemoveProduct()
        {
            int productId = 1;

            productController.RemoveProduct(productId);

            mockDataAccess.Verify(d => d.RemoveProduct(productId), Times.Once);
        }
    }
}
UserController Tests:
csharp
Copy code
using NUnit.Framework;
using Moq;
using TheShoppinCart.Controllers;
using TheShoppinCart.Models;

namespace TheShoppinCart.Tests.Controllers
{
    [TestFixture]
    public class UserControllerTests
    {
        private UserController userController;
        private Mock<DataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<DataAccess>();
            userController = new UserController(mockDataAccess.Object);
        }

        [Test]
        public void CreateUser_ShouldReturnTrueIfUserCreated()
        {
            string username = "testuser";
            string password = "password";
            mockDataAccess.Setup(d => d.CreateUser(username, password)).Returns(true);

            var result = userController.CreateUser(username, password);

            Assert.IsTrue(result);
        }

        [Test]
        public void GetUser_ShouldReturnUser()
        {
            string username = "testuser";
            string password = "password";
            var expectedUser = new User { UserID = 1, Username = username, Password = password };
            mockDataAccess.Setup(d => d.GetUser(username, password)).Returns(expectedUser);

            var result = userController.GetUser(username, password);

            Assert.AreEqual(expectedUser, result);
        }

        [Test]
        public void DoesUserExist_ShouldReturnTrueIfUserExists()
        {
            string username = "testuser";
            string password = "password";
            mockDataAccess.Setup(d => d.DoesUserExist(username, password)).Returns(true);

            var result = userController.DoesUserExist(username, password);

            Assert.IsTrue(result);
        }
    }
}



using NUnit.Framework;
using System;
using System.Collections.Generic;
using TheShoppinCart.Models;

namespace TheShoppinCart.Tests
{
    [TestFixture]
    public class DataAccessTests
    {
        private DataAccess _dataAccess;

        [SetUp]
        public void Setup()
        {
            _dataAccess = new DataAccess();
            // Additional setup code if needed
        }

        [Test]
        public void GetProducts_ReturnsProducts()
        {
            // Arrange & Act
            List<Product> products = _dataAccess.GetProducts("Price", "ASC");

            // Assert
            Assert.IsNotNull(products);
            Assert.Greater(products.Count, 0);
            // Add more assertions based on your expected data
        }

        [Test]
        public void GetProductById_ValidProductId_ReturnsProduct()
        {
            // Arrange
            int productId = 1;

            // Act
            Product product = _dataAccess.GetProductById(productId);

            // Assert
            Assert.IsNotNull(product);
            Assert.AreEqual(productId, product.ProductID);
            // Add more assertions based on expected data
        }

        [Test]
        public void GetProductById_InvalidProductId_ReturnsNull()
        {
            // Arrange
            int productId = -1; // Assuming -1 is an invalid product ID

            // Act
            Product product = _dataAccess.GetProductById(productId);

            // Assert
            Assert.IsNull(product);
            // Add more specific assertions if needed
        }

        [Test]
        public void AddToCart_ValidParameters_Success()
        {
            // Arrange
            int userId = 1;
            int productId = 101;
            int quantity = 2;

            // Act
            _dataAccess.AddToCart(userId, productId, quantity);
            List<Cart> cartItems = _dataAccess.GetCartItems(userId);

            // Assert
            Assert.IsNotNull(cartItems);
            Assert.AreEqual(1, cartItems.Count); // Adjust based on your test data
            Assert.AreEqual(productId, cartItems[0].ProductID);
            Assert.AreEqual(quantity, cartItems[0].Quantity);
        }

        [Test]
        public void GetCartItems_ReturnsCartItems()
        {
            // Arrange
            int userId = 1;

            // Act
            List<Cart> cartItems = _dataAccess.GetCartItems(userId);

            // Assert
            Assert.IsNotNull(cartItems);
            // Add more specific assertions based on expected data
        }

        [Test]
        public void ClearCart_Success()
        {
            // Arrange
            int userId = 1;

            // Act
            _dataAccess.ClearCart(userId);
            List<Cart> cartItems = _dataAccess.GetCartItems(userId);

            // Assert
            Assert.IsEmpty(cartItems);
        }

        [Test]
        public void GetDiscountByCode_ValidCode_ReturnsDiscount()
        {
            // Arrange
            string discountCode = "SUMMER25";

            // Act
            Discount discount = _dataAccess.GetDiscountByCode(discountCode);

            // Assert
            Assert.IsNotNull(discount);
            Assert.AreEqual(discountCode, discount.DiscountCode);
            // Add more specific assertions based on expected data
        }

        [Test]
        public void GetDiscountByCode_InvalidCode_ReturnsNull()
        {
            // Arrange
            string invalidCode = "INVALIDCODE";

            // Act
            Discount discount = _dataAccess.GetDiscountByCode(invalidCode);

            // Assert
            Assert.IsNull(discount);
            // Add more specific assertions if needed
        }

        [Test]
        public void CreateUser_ValidUser_Success()
        {
            // Arrange
            string username = "testuser";
            string password = "testpassword";

            // Act
            bool result = _dataAccess.CreateUser(username, password);

            // Assert
            Assert.IsTrue(result);
            // Add more specific assertions or cleanup if needed
        }

        [Test]
        public void GetUser_ValidCredentials_ReturnsUser()
        {
            // Arrange
            string username = "testuser";
            string password = "testpassword";

            // Act
            User user = _dataAccess.GetUser(username, password);

            // Assert
            Assert.IsNotNull(user);
            Assert.AreEqual(username, user.Username);
            // Add more specific assertions based on expected data
        }

        [Test]
        public void GetUser_InvalidCredentials_ReturnsNull()
        {
            // Arrange
            string username = "invaliduser";
            string password = "invalidpassword";

            // Act
            User user = _dataAccess.GetUser(username, password);

            // Assert
            Assert.IsNull(user);
            // Add more specific assertions if needed
        }

        [Test]
        public void DoesUserExist_ExistingUser_ReturnsTrue()
        {
            // Arrange
            string username = "existinguser";
            string password = "password";

            // Act
            bool exists = _dataAccess.DoesUserExist(username, password);

            // Assert
            Assert.IsTrue(exists);
        }

        [Test]
        public void DoesUserExist_NonExistingUser_ReturnsFalse()
        {
            // Arrange
            string username = "nonexistinguser";
            string password = "password";

            // Act
            bool exists = _dataAccess.DoesUserExist(username, password);

            // Assert
            Assert.IsFalse(exists);
        }

        [Test]
        public void AddProduct_ValidProduct_Success()
        {
            // Arrange
            Product productToAdd = new Product
            {
                ProductName = "New Product",
                Price = 99.99M
            };

            // Act
            _dataAccess.AddProduct(productToAdd);

            // Assert
            Assert.IsTrue(_dataAccess.ProductExists(productToAdd.ProductName, productToAdd.Price));
            // Clean up or additional assertions if needed
        }

        [Test]
        public void UpdateProduct_ValidProduct_Success()
        {
            // Arrange
            Product productToUpdate = new Product
            {
                ProductID = 1,
                ProductName = "Updated Product",
                Price = 75.00M
            };

            // Act
            _dataAccess.UpdateProduct(productToUpdate);
            Product updatedProduct = _dataAccess.GetProductById(productToUpdate.ProductID);

            // Assert
            Assert.IsNotNull(updatedProduct);
            Assert.AreEqual(productToUpdate.ProductName, updatedProduct.ProductName);
            Assert.AreEqual(productToUpdate.Price, updatedProduct.Price);
        }

        [Test]
        public void RemoveProduct_ValidProductId_Success()
        {
            // Arrange
            int productIdToRemove = 1;

            // Act
            _dataAccess.RemoveProduct(productIdToRemove);
            Product removedProduct = _dataAccess.GetProductById(productIdToRemove);

            // Assert
            Assert.IsNull(removedProduct);
        }

        [Test]
        public void RemoveFromCart_ValidParameters_Success()
        {
            // Arrange
            int userId = 1;
            int productId = 101;

            // Act
            _dataAccess.RemoveFromCart(userId, productId);
            List<Cart> cartItems = _dataAccess.GetCartItems(userId);

            // Assert
            Assert.IsNotNull(cartItems);
            Assert.AreEqual(0, cartItems.Count); // Assuming the cart item was successfully removed
        }

        // Add more tests for other methods as needed
    }
}




using NUnit.Framework;
using System;
using System.Data.SqlClient;
using TheShoppinCart.Models;

namespace TheShoppinCart.Tests
{
    [TestFixture]
    public class DataAccessTests
    {
        private DataAccess _dataAccess;

        [SetUp]
        public void Setup()
        {
            _dataAccess = new DataAccess();
            // Additional setup code if needed
        }

        [Test]
        public void ProductExists_ProductDoesNotExist_ReturnsFalse()
        {
            // Arrange
            string productName = "NonExistingProduct";
            decimal price = 99.99M;

            // Act
            bool exists = _dataAccess.ProductExists(productName, price);

            // Assert
            Assert.IsFalse(exists);
        }

        [Test]
        public void ProductExists_ProductExists_ReturnsTrue()
        {
            // Arrange
            string productName = "ExistingProduct";
            decimal price = 49.99M;

            // Assuming the product exists in your database
            InsertProductIntoDatabase(productName, price);

            // Act
            bool exists = _dataAccess.ProductExists(productName, price);

            // Assert
            Assert.IsTrue(exists);

            // Clean up - remove the product from the database
            RemoveProductFromDatabase(productName, price);
        }

        private void InsertProductIntoDatabase(string productName, decimal price)
        {
            using (SqlConnection conn = new SqlConnection(_dataAccess.GetConnectionString()))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("INSERT INTO Products (ProductName, Price) VALUES (@ProductName, @Price)", conn);
                cmd.Parameters.AddWithValue("@ProductName", productName);
                cmd.Parameters.AddWithValue("@Price", price);
                cmd.ExecuteNonQuery();
            }
        }

        private void RemoveProductFromDatabase(string productName, decimal price)
        {
            using (SqlConnection conn = new SqlConnection(_dataAccess.GetConnectionString()))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("DELETE FROM Products WHERE ProductName=@ProductName AND Price=@Price", conn);
                cmd.Parameters.AddWithValue("@ProductName", productName);
                cmd.Parameters.AddWithValue("@Price", price);
                cmd.ExecuteNonQuery();
            }
        }
    }
}




using NUnit.Framework;
using Moq;
using System;

namespace TheShoppinCart.Tests
{
    [TestFixture]
    public class DataAccessTests
    {
        private Mock<IDataAccess> mockDataAccess;

        [SetUp]
        public void Setup()
        {
            mockDataAccess = new Mock<IDataAccess>();
        }

        [Test]
        public void AddToCart_ShouldAddItemToCart()
        {
            // Arrange
            int userId = 1;
            int productId = 10;
            int quantity = 2;

            // Mock setup
            mockDataAccess.Setup(d => d.AddToCart(userId, productId, quantity)).Throws(new Exception("Simulated exception"));

            // Act and Assert
            try
            {
                var result = mockDataAccess.Object.AddToCart(userId, productId, quantity);
                Assert.Fail("Expected exception was not thrown.");
            }
            catch (Exception ex)
            {
                // Log or handle the exception as needed
                Console.WriteLine("Exception thrown: " + ex.Message);
                Assert.IsTrue(ex is TargetInvocationException, "Expected TargetInvocationException");
                Assert.IsNotNull(ex.InnerException, "Inner exception should not be null");
                Assert.AreEqual("Simulated exception", ex.InnerException.Message, "Inner exception message mismatch");
            }
        }
    }
}





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Moq;
using NUnit.Framework;
using TheShoppinCart.Controllers;
using TheShoppinCart.Data;
using Microsoft.AspNetCore.Mvc;
 
 
namespace TheShoppinCart.Data
{
    [TestFixture]
    public class UserControllerTests
    {
        private Mock<DataAccess> _mockDataAccess;
        private UserController _userController;
 
        [SetUp]
        public void Setup()
        {
            _mockDataAccess = new Mock<DataAccess>();
            _userController = new UserController(_mockDataAccess.Object);
 
 
        }
        [Test]
        public void GetUserAndPassword()
        {
            string username = "aswin";
            string password = "12345";
            var mockuser = new User { UserID = 1, Username = username, Password = password };
            _mockDataAccess.Setup(x => x.GetUser(username, password)).Returns(mockuser);
 
            var result = _userController.GetUser(username, password);
            Assert.IsInstanceOf<OkObjectResult>(result);
            Assert.Equals(username, result.Username);
        }
    }
 }
